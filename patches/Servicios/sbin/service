#!/bin/sh
#
# description: Starts and stops the Samba smbd daemon\
#	       used to provide SMB network services.
#
# config:  /usr/local/daemon/samba/lib/smb.conf


# Check that smb.conf exists.
#[ -f /tmp/Package/samba/lib/smb.conf ] || exit 0

#RETVAL=0

# ====== UTILITY FUNCTION BEGINNING ======

# Set up a default search path.
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
export PATH

# Check if $pid (could be plural) are running
checkpid() {
	local i

	for i in $* ; do
		[ -d "/proc/$i" ] && return 0
	done
	return 1
}

# __proc_pids {program} [pidfile]
# Set $pid to pids from /var/run* for {program}.  $pid should be declared
# local in the caller.
# Returns LSB exit code for the 'status' action.
__pids_var_run() {
	local base=${1##*/}
	local pid_file=${2:-/var/run/$base.pid}

	pid=
	if [ -f "$pid_file" ] ; then
	        local line p
		read line < "$pid_file"
		for p in $line ; do
			[ -d "/proc/$p" ] && pid="$pid $p"
		done
	        if [ -n "$pid" ]; then
	                return 0
	        fi
		return 1 # "Program is dead and /var/run pid file exists"
	fi
	return 3 # "Program is not running"
}

# Output PIDs of matching processes, found using pidof
__pids_pidof() {
	pidof "$1"
}

# A function to stop a program.
killproc() {
	local RC killlevel= base pid pid_file= delay

	RC=0; delay=3
	# Test syntax.
	if [ "$#" -eq 0 ]; then
		echo $"Usage: killproc [-p pidfile] [ -d delay] {program} [-signal]"
		return 1
	fi
	if [ "$1" = "-p" ]; then
		pid_file=$2
		shift 2
	fi
	if [ "$1" = "-d" ]; then
		delay=$2
		shift 2
	fi
        

	# check for second arg to be kill level
	[ -n "${2:-}" ] && killlevel=$2

        # Save basename.
        base=${1##*/}

        # Find pid.
	__pids_var_run "$1" "$pid_file"
	if [ -z "$pid_file" -a -z "$pid" ]; then
		pid="$(__pids_pidof "$1")"
	fi

        # Kill it.
        if [ -n "$pid" ] ; then
                [ "$BOOTUP" = "verbose" -a -z "${LSB:-}" ] && echo -n "$base "
		if [ -z "$killlevel" ] ; then
		       if checkpid $pid 2>&1; then
			   # TERM first, then KILL if not dead
			   kill -TERM $pid >/dev/null 2>&1
			   usleep 100000
			   if checkpid $pid && sleep 1 &&
			      checkpid $pid && sleep $delay &&
			      checkpid $pid ; then
                                kill -KILL $pid >/dev/null 2>&1
				usleep 100000
			   fi
		        fi
			checkpid $pid
			RC=$?
			[ "$RC" -eq 0 ] && failure $"$base shutdown" || success $"$base shutdown"
			RC=$((! $RC))
		# use specified level only
		else
		        if checkpid $pid; then
	                	kill $killlevel $pid >/dev/null 2>&1
				RC=$?
				[ "$RC" -eq 0 ] && success $"$base $killlevel" || failure $"$base $killlevel"
			elif [ -n "${LSB:-}" ]; then
				RC=7 # Program is not running
			fi
		fi
	else
		if [ -n "${LSB:-}" -a -n "$killlevel" ]; then
			RC=7 # Program is not running
		else
			failure $"$base shutdown"
			RC=0
		fi
	fi

        # Remove pid file if any.
	if [ -z "$killlevel" ]; then
            rm -f "${pid_file:-/var/run/$base.pid}"
	fi
	return $RC
}

# Log that something succeeded
success() {
  return 0
}

# Log that something failed
failure() {
  local rc=$?
  return $rc
}

# ====== UTILITY FUNCTION END ======

# ====== Samba ======
smb_start() {
        KIND="SMB"
	echo -n $"Starting $KIND services: "
	nice -n 10 /usr/local/daemon/samba/sbin/smbd -D
	RETVAL=$?
	KIND="NMB"
        echo -n $"Starting $KIND services: "
        nice -n 10 /usr/local/daemon/samba/sbin/nmbd -D 
	RETVAL2=$?
	if [ $RETVAL -eq 0 -a $RETVAL2 -eq 0 ]
	then 
	  return 0
	else 
	  return 1
	fi
}	

smb_stop() {
	echo -n $"Shutting down SMB services: "
	killproc smbd
	echo -n $"Shutting down NMB services: "
	killproc nmbd
	return 0;
}	

smb_restart() {
	smb_stop
	smb_start
}	


smb_status() {
	if [ -e /usr/local/daemon/samba/var/locks/smbd.pid ]
	then 
	  PID=`cat /usr/local/daemon/samba/var/locks/smbd.pid`
          if [ -e /proc/$PID ]                                                  
          then
	    echo $"SMB Service is running"                                                                    
            RETVAL=0
	  else
	    echo $"SMB Serice is stopped"
	    RETVAL=1	                                                 
          fi
	else
	  echo $"SMB Serice is stopped"
          RETVAL=1
	fi
	return $RETVAL                   
}

# ====== UPnP ======
upnp_start() {
        KIND="UPnP"
	echo -n $"Starting $KIND services: "
	nice -n 10 /sbin/www/ushare -f /sbin/www/ushare.conf -D
	RETVAL=$?
	if [ $RETVAL -eq 0 ]
	then 
	  return 0
	else 
	  return 1
	fi
}	

upnp_stop() {
	echo -n $"Shutting down UPnP services: "
	killproc ushare
	return 0;
}	

upnp_restart() {
	upnp_stop
	upnp_start
}	


upnp_status() {
	  PID=`ps ax | grep -v "ps ax" | grep -v grep | grep ushare | awk '{ print $1 }'`
	  if [ -z $PID ]                                                  
	  then
	    echo $"UPnP Service is stopped"                                                                    
	    RETVAL=1
	  else
	    echo $"UPnP Serice is running"
	    RETVAL=0	                                                 
	  fi
	
	return $RETVAL                   
}

# ====== HTTP ======
http_start() {
        KIND="HTTP"
	echo -n $"Starting $KIND services: "
	nice -n 10 /sbin/www/lighttpd -f /sbin/www/lighttpd.conf
	RETVAL=$?
	if [ $RETVAL -eq 0 ]
	then
	  mkdir -p /tmp/locks
	  echo -n run > /tmp/locks/http 
	  return 0
	else 
	  return 1
	fi
}	

http_stop() {
	echo -n $"Shutting down HTTP services: "
	killproc lighttpd
	rm /tmp/locks/http
	return 0;
}	

http_restart() {
	http_stop
	http_start
}	


http_status() {
	PID=`ps ax | grep -v "ps ax" | grep -v grep | grep lighttpd | awk '{ print $1 }'`
	if [ -z $PID ]                                                  
	then
	    echo $"HTTP Service is stopped"                                                                    
	    RETVAL=1
	else
	    echo $"HTTP Serice is running"
	    RETVAL=0	                                                 
	fi

return $RETVAL                   
}


# ====== HTTP Local======
http_local_start() {
        KIND="HTTP_Local"
	echo -n $"Starting $KIND services: "
	nice -n 10 /sbin/www/lighttpd -f /sbin/www/lighttpd_local.conf
	RETVAL=$?
	if [ $RETVAL -eq 0 ]
	then
	  mkdir -p /tmp/locks
	  echo -n run > /tmp/locks/http 
	  return 0
	else 
	  return 1
	fi
}	

http_local_stop() {
	echo -n $"Shutting down HTTP Local services: "
	killproc lighttpd
	rm /tmp/locks/http
	return 0;
}	

http_local_restart() {
	http_local_stop
	http_local_start
}	


http_local_status() {
	PID=`ps ax | grep -v "ps ax" | grep -v grep | grep lighttpd | awk '{ print $1 }'`
	if [ -z $PID ]                                                  
	then
	    echo $"HTTP Local Service is stopped"                                                                    
	    RETVAL=1
	else
	    echo $"HTTP Local Serice is running"
	    RETVAL=0	                                                 
	fi

return $RETVAL                   
}

# ====== FTP ======
ftp_start() {
        KIND="FTP"
	echo -n $"Starting $KIND services: "
	nice -n 10 /sbin/www/stupid-ftpd -f /usr/local/etc/stupid-ftpd.conf
	RETVAL=$?
	if [ $RETVAL -eq 0 ]
	then 
	  return 0
	else 
	  return 1
	fi
}	

ftp_stop() {
	echo -n $"Shutting down FTP services: "
	killproc stupid-ftpd
	return 0;
}	

ftp_restart() {
	ftp_stop
	ftp_start
}	


ftp_status() {
	PID=`ps ax | grep -v "ps ax" | grep -v grep | grep stupid-ftpd | awk '{ print $1 }'`
	if [ -z $PID ]                                                  
	then
	    echo $"FTP Serice is stopped"
	    RETVAL=1	                                                 
	else
	    echo $"FTP Service is running"                                                                    
	    RETVAL=0
	fi
	return $RETVAL                   
}

# ====== Disk_Spindown ======
spin_start() {
        KIND="spin"
	echo -n $"Starting $KIND services: "
	nice -n 10 spindownd -d -f /tmp/spindown.fifo -p /dev/null -c /sbin/spindown.conf
	RETVAL=$?
	if [ $RETVAL -eq 0 ]
	then 
	  return 0
	else 
	  return 1
	fi
}	

spin_stop() {
	echo -n $"Shutting down spin services: "
	killproc spindownd
	return 0;
}	

spin_restart() {
	spin_stop
	spin_start
}	


spin_status() {
	PID=`ps ax | grep -v "ps ax" | grep -v grep | grep spindownd | awk '{ print $1 }'`
	if [ -z $PID ]                                                  
	then
	    echo $"spin Serice is stopped"
	    RETVAL=1	                                                 
	else
	    echo $"spin Service is running"                                                                    
	    RETVAL=0
	fi
	return $RETVAL                   
}

case "$1" in
	samba)
		case "$2" in
		  start)
			smb_start
			;;
		  stop)
			smb_stop
			;;
		  restart)
			smb_restart
			;;
		  status)
			smb_status
			;;
		  *)
			echo $"Usage: $0 samba {start|stop|restart|status}"
			#exit 1
		esac
		;;
	upnp)
		case "$2" in
		  start)
			upnp_start
			;;
		  stop)
			upnp_stop
			;;
		  restart)
			upnp_restart
			;;
		  status)
			upnp_status
			;;
		  *)
			echo $"Usage: $0 upnp {start|stop|restart|status}"
			#exit 1
		esac
		;;
	http)
		case "$2" in
		  start)
			http_start
			;;
		  stop)
			http_stop
			;;
		  restart)
			http_restart
			;;
		  status)
			http_status
			;;
		  *)
			echo $"Usage: $0 http {start|stop|restart|status}"
			#exit 1
		esac
		;;

	http_local)
		case "$2" in
		  start)
			http_local_start
			;;
		  stop)
			http_local_stop
			;;
		  restart)
			http_local_restart
			;;
		  status)
			http_local_status
			;;
		  *)
			echo $"Usage: $0 http_local {start|stop|restart|status}"
			#exit 1
		esac
		;;

	ftp)
		case "$2" in
		  start)
			ftp_start
			;;
		  stop)
			ftp_stop
			;;
		  restart)
			ftp_restart
			;;
		  status)
			ftp_status
			;;
		  *)
			echo $"Usage: $0 ftp {start|stop|restart|status}"
			#exit 1
		esac
		;;
	spin)
		case "$2" in
		  start)
			spin_start
			;;
		  stop)
			spin_stop
			;;
		  restart)
			spin_restart
			;;
		  status)
			spin_status
			;;
		  *)
			echo $"Usage: $0 spin {start|stop|restart|status}"
			#exit 1
		esac
		;;
	*)
	echo $"Usage: $0 {samba|upnp|http|ftp} {start|stop|restart|status}"
	#exit 1
esac

exit $?
